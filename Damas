import pygame

class damas:
    
    def __init__(self, color, posicion, tablero):
        self.color = color
        self.pos = posicion
        self.tabl = tablero 
        
    def __str__(self):
        return "Color:\t\t {0} \nPosicion:\t {1}".format(self.color, self.pos)
    
    def draw(self, pantalla, color, posicion):
        if self.color == "Negro":
            pantalla.blit(pygame.image.load("black_circle.png"), posicion)
        if self.color == "Blanco":
            pantalla.blit(pygame.image.load("white_circle.png"), posicion)
    
    def move(self):
        if pygame.key.get_pressed()[K_DOWN]:
            self.pos[0] += 86.25
        elif pygame.key.get_pressed()[K_UP]:
            self.pos[0] -= 86.25
        elif pygame.key.get_pressed()[K_LEFT]:
            self.pos[1] -= 86.25
        elif pygame.key.get_pressed()[K_RIGHT]:
            self.pos[1] -= 86.25

#Tablero
def crear_tablero(pantalla):
    
    color = [(96,96,96),(255,204,153),(255, 255, 255)]  #Gris, Marr칩n, Blanco
    pantalla_size = (750, 750)
    borde_size = 30
    n_casillas = 8
    casillas_size = (pantalla_size[0]-(2*borde_size))/n_casillas
    eje_y = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
    
    count = 0
    for i in range(n_casillas):               #Columnas 
        for j in range(n_casillas):         #Filas 
            x = i * casillas_size + 30
            y = j * casillas_size + 30
            if count % 2 == 0:              #Dividir entre pares e impares para colorear
                pygame.draw.rect(pantalla, color[0], [x, y, casillas_size, casillas_size])
            else: 
                pygame.draw.rect(pantalla, color[1], [x, y, casillas_size, casillas_size])
            count += 1                      #Count para filas
        count +=1                           #Count para columnas 
            
        fuente = pygame.font.Font(None, 30)
        pantalla.blit(fuente.render(eje_y[i],1,color[0]), [i * casillas_size + borde_size * 2, borde_size-20])
        pantalla.blit(fuente.render(str(i+1),1,color[0]), [borde_size -20, i * casillas_size + borde_size*2])

#Posicion
def posicion(mouse, actual):
    n_casillas = 8
    casillas_size = (pantalla_size[0]-(2*borde_size))/n_casillas
    
    xr = mouse[0]
    yr = mouse[1]
    for i in range(n_casillas):
        for j in range(n_casillas):
            x = i * casillas_size + borde_size
            y = j * casillas_size + borde_size
            if (xr >= x) and (xr <= x + casillas_size) and (yr >= y) and (yr <= y + casillas_size):
                actual = [eje_y[i], j + 1]
    return actual

            
def main():
    pygame.init()

    pantalla = pygame.display.set_mode(pantalla_size)
    pygame.display.set_caption("PyDamas")

    game_over = False 
    
    seleccion = ["A","1"]

    while game_over is False:
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                game_over = True

        botones = pygame.mouse.get_pressed()
        
        if botones[0]:
            pos = pygame.mouse.get_pos()
            seleccion = posicion(pos, seleccion)
            
        pantalla.fill(color[2])
        
        crear_tablero(pantalla)
        pygame.draw.rect(pantalla, color[2],[(eje_y.index(str(seleccion[0])) * casillas_size + borde_size),((int(seleccion[1])-1) * casillas_size + borde_size), casillas_size, casillas_size])
        fuente = pygame.font.Font(None, 30)
        pantalla.blit(fuente.render(str(seleccion),1,color[0]), [375,725])
        
        black_piece = pygame.image.load("black_circle.png")
        b_piece_centrada = (casillas_size-black_piece.get_width()) // 2
        
        if pygame.mouse.get_pressed() == (1,0,0) and len(posiciones_black) < 8:
            posiciones_black.append((int(pygame.mouse.get_pos()[0])-b_piece_centrada,int(pygame.mouse.get_pos()[1])- b_piece_centrada))
            
        for i in posiciones_black:
            pantalla.blit(black_piece, i)
        
        pygame.display.flip()

    pygame.quit()

#Colores
color = [(96,96,96),(255,204,153),(255, 255, 255)]  #Gris, Marr칩n, Blanco

#Tama침os
pantalla_size = (750, 750)
borde_size = 30
n_casillas = 8
casillas_size = (pantalla_size[0]-(2*borde_size))/n_casillas

#Eje
eje_y = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']

if __name__ == "__main__":
    posiciones_black = []   #Ojo: Establecer error si hay m치s de 8 fichas
    main()
